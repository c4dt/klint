#ifndef GHOST_MAP_GH_INCLUDED
#define GHOST_MAP_GH_INCLUDED

// -- Public API --

fixpoint option<v> ghostmap_get<k, v>(list<pair<k, v> > ghostmap, k key) {
  switch(ghostmap) {
    case nil: return none;
    case cons(h, t):
      return switch(h) {
        case pair(hk, hv):
          return hk == key ? some(hv) : ghostmap_get(t, key);
      };
  }
}

fixpoint list<pair<k, v> > ghostmap_set<k, v>(list<pair<k, v> > ghostmap, k key, v value) {
  switch(ghostmap) {
    case nil: return cons(pair(key, value), nil);
    case cons(h, t):
      return switch(h) {
        case pair(hk, hv):
          return hk == key ? cons(pair(key, value), t) : cons(h, ghostmap_set(t, key, value));
      };
  }
}

fixpoint list<pair<k, v> > ghostmap_remove<k, v>(list<pair<k, v> > ghostmap, k key) {
  switch(ghostmap) {
    case nil: return nil;
    case cons(h, t):
      return switch(h) {
        case pair(hk, hv):
          return hk == key ? t : ghostmap_remove(t, key);
      };
  }
}

// -- Private API --

fixpoint bool ghostmap_distinct<k, v>(list<pair<k, v> > ghostmap) {
  return distinct(map(fst, ghostmap));
}

// -- Lemmas --

lemma_auto(ghostmap_get(ghostmap, key)) void ghostmap_get_implies_mem<k, v>(list<pair<k, v> > ghostmap, k key)
requires ghostmap_get(ghostmap, key) != none;
ensures true == mem(key, map(fst, ghostmap));
{
  switch(ghostmap) {
    case nil:
      assert false;
    case cons(h, t):
      switch(h) {
        case pair(hk, hv):
          if (hk == key) {
            assert true;
          } else {
            ghostmap_get_implies_mem(t, key);
          }
      }
  }
}

#endif
